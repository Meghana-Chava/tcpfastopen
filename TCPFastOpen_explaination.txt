TCP Fast Open (https://reproducingnetworkresearch.wordpress.com/2015/05/31/cs24415-tcp-fast-open/)
* Generally, HTTP requests take 2 RTTs out of which 1 goes for handshake => unneccessary delay especially with high RTT.
* If we add process data with SYN, client can spoof IP to gain access(Threat)
* TCP fast open uses cookie based authentication
	. The first time client connects, client requests for cookie using SYN server sends the cookie SYN ACK. In future connections, client sends the cookie along with data in SYN.
	. The cookie sent by server is encrypted using server's secret key, hence it can't be spoofed.
	https://reproducingnetworkresearch.files.wordpress.com/2015/05/q4.png?w=768&h=629
* This protocol requires both server and client to be TFO enabled.

This counter represents TFO connections that
have been accepted by the server but that have not been migrated to the fully-established TCP state, which occurs only
after receiving the first ACK from the peer (completion of
3WHS). When the number of pending TFO connections exceeds a certain threshold (that is administratively set), the
server temporarily disables TFO and any incoming TFO requests fall back on regular 3WHS. This allows the usual
SYN flood defense techniques [19] to prevent further damage until the pending TFO requests falls below the threshold.
This limit makes it possible for an attacker to overflow the
limit and temporarily disable TFO on the server, but we believe that this is unlikely to be of interest to an attacker since
this would only disable the TFO “fast path” while leaving
the service intact.

Original paper:
https://dl.acm.org/doi/pdf/10.1145/2079296.2079317
	
Why is it not being used?
https://squeeze.isobar.com/2019/04/11/the-sad-story-of-tcp-fast-open/